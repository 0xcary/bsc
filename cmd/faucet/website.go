// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.845kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x7a\x6d\x73\xdb\x38\x92\xff\x6b\xe7\x53\xf4\xf0\x9f\xac\xa4\xbf\x45\x52\xb6\x93\xac\x4f\x22\x35\x15\x67\x67\xf7\x72\x75\x97\x99\x9a\x64\xea\x6e\x6b\x76\xea\x0a\x24\x5a\x22\x62\x10\xe0\x00\xa0\x64\x8d\x4b\xdf\xfd\x0a\x00\x49\x51\x0f\xf6\x24\xe3\x5c\xdd\x5d\x5e\x38\x24\xd0\xe8\x6e\x74\xff\x80\x7e\x10\x93\x6f\xfe\xf2\xfd\xdb\x8f\x7f\xff\xe1\x3b\x28\x4c\xc9\xe7\xcf\x12\xfb\x1f\x70\x22\x96\x69\x80\x22\x98\x3f\x3b\x4b\x0a\x24\x74\xfe\xec\xec\x2c\x29\xd1\x10\xc8\x0b\xa2\x34\x9a\x34\xa8\xcd\x22\xbc\x0e\x76\x13\x85\x31\x55\x88\xbf\xd6\x6c\x95\x06\xff\x11\xfe\xf4\x26\x7c\x2b\xcb\x8a\x18\x96\x71\x0c\x20\x97\xc2\xa0\x30\x69\xf0\xee\xbb\x14\xe9\x12\x7b\xeb\x04\x29\x31\x0d\x56\x0c\xd7\x95\x54\xa6\x47\xba\x66\xd4\x14\x29\xc5\x15\xcb\x31\x74\x2f\x63\x60\x82\x19\x46\x78\xa8\x73\xc2\x31\xbd\x08\xe6\xcf\x2c\x1f\xc3\x0c\xc7\xf9\xfd\x7d\xf4\x1e\xcd\x5a\xaa\xdb\xed\x76\x0a\x7f\x25\x75\x8e\x26\x89\xfd\x9c\x23\xe3\x4c\xdc\x42\xa1\x70\x91\x06\x56\x59\x3d\x8d\xe3\x9c\x8a\x4f\x3a\xca\xb9\xac\xe9\x82\x13\x85\x51\x2e\xcb\x98\x7c\x22\x77\x31\x67\x99\x8e\xcd\x9a\x19\x83\x2a\xcc\xa4\x34\xda\x28\x52\xc5\x57\xd1\x55\xf4\xe7\x38\xd7\x3a\xee\xc6\xa2\x92\x89\x28\xd7\x3a\x00\x85\x3c\x0d\xb4\xd9\x70\xd4\x05\xa2\x09\x20\x9e\xff\x31\xb9\x0b\x29\x4c\x48\xd6\xa8\x65\x89\xf1\xcb\xe8\xcf\xd1\xc4\x89\xec\x0f\x3f\x2e\xd5\x8a\xd5\xb9\x62\x95\x01\xad\xf2\xcf\x96\xfb\xe9\xd7\x1a\xd5\x26\xbe\x8a\x2e\xa2\x8b\xe6\xc5\xc9\xf9\xa4\x83\x79\x12\x7b\x86\xf3\x27\xf1\x0e\x85\x34\x9b\xf8\x32\x7a\x19\x5d\xc4\x15\xc9\x6f\xc9\x12\x69\x2b\xc9\x4e\x45\xed\xe0\x57\x93\xfb\x90\x0f\x3f\x1d\xba\xf0\x6b\x08\x2b\x65\x89\xc2\x44\x9f\x74\x7c\x19\x5d\x5c\x47\x93\x76\xe0\x98\xbf\x13\x60\x9d\x66\x45\x9d\x45\x2b\x54\x86\xe5\x84\x87\x39\x0a\x83\x0a\xee\xed\xe8\x59\xc9\x44\x58\x20\x5b\x16\x66\x0a\x17\x93\xc9\x8b\xd9\xa9\xd1\x55\xe1\x87\x29\xd3\x15\x27\x9b\x29\x2c\x38\xde\xf9\x21\xc2\xd9\x52\x84\xcc\x60\xa9\xa7\xe0\x39\xbb\x89\xad\x93\x59\x29\xb9\x54\xa8\x75\x23\xac\x92\x9a\x19\x26\xc5\xd4\x22\x8a\x18\xb6\xc2\x53\xb4\xba\x22\xe2\x68\x01\xc9\xb4\xe4\xb5\xc1\x03\x45\x32\x2e\xf3\x5b\x3f\xe6\xce\x6f\x7f\x13\xb9\xe4\x52\x4d\x61\x5d\xb0\x66\x19\x38\x41\x50\x29\x6c\xd8\x43\x45\x28\x65\x62\x39\x85\xd7\x55\xb3\x1f\x28\x89\x5a\x32\x31\x85\xc9\x6e\x49\x12\xb7\x66\x4c\x62\x7f\x55\x3d\x3b\x4b\x32\x49\x37\xce\x87\x94\xad\x20\xe7\x44\xeb\x34\x38\x30\xb1\xbb\x82\xf6\x08\xec\xcd\x43\x98\x68\xa7\xf6\xe6\x94\x5c\x07\xe0\x04\xa5\x81\x57\x22\xcc\xa4\x31\xb2\x9c\xc2\x85\x55\xaf\x59\x72\xc0\x8f\x87\x7c\x19\x5e\x5c\xb6\x93\x67\x49\x71\xd1\x32\x31\x78\x67\x42\xe7\x9f\xce\x33\xc1\x3c\x61\xed\xda\x05\x81\x05\x09\x33\x62\x8a\x00\x88\x62\x24\x2c\x18\xa5\x28\xd2\xc0\xa8\x1a\x2d\x8e\xd8\x1c\xfa\x17\x5e\x77\xdf\x15\x17\xad\x26\x31\x65\xab\x66\x23\xbd\xc7\x83\x3d\x3d\xac\xf6\x35\x34\x0f\x72\xb1\xd0\x68\xc2\xde\x2e\x7a\xc4\x4c\x54\xb5\x09\x97\x4a\xd6\x55\x37\x7f\x96\xb8\x51\x60\x34\x0d\x6a\xc5\x83\xe6\x8a\x77\x8f\x66\x53\x35\x9b\x0f\xba\xad\x4a\x55\x86\xd6\xf6\x4a\xf2\x00\x2a\x4e\x72\x2c\x24\xa7\xa8\xd2\xe0\x83\xcc\x19\xe1\x20\xfc\x2e\xe1\xa7\x1f\xff\x15\x1a\x27\x31\xb1\x84\x8d\xac\x15\xdc\x7c\x78\x0b\x84\x52\x8b\xcd\x28\x8a\x7a\x3a\x38\xa0\x1e\x6b\x19\x66\x46\xec\xa8\xce\x92\xac\x36\x46\x76\x84\x99\x11\x90\x19\x11\x52\x5c\x90\x9a\x1b\xa0\x4a\x56\x54\xae\x45\x68\xe4\x72\x69\x03\x99\xd7\xdf\x2f\x0a\x80\x12\x43\x9a\xa9\x34\x68\x69\x5b\x87\x11\x5d\xc9\xaa\xae\x1a\x97\xf9\x41\xbc\xab\x88\xa0\x48\xad\x83\xb9\xc6\x60\xfe\x37\xb6\x42\x28\x11\x6e\xde\xdf\x9c\x1d\x7a\x3f\x27\x0a\x4d\xd8\x67\x79\x84\x81\x24\xf6\xaa\xf8\x0d\x41\xf3\x2f\xa9\x79\xcb\xa9\xdb\x40\x89\xa2\x86\xbd\xb7\x50\xd9\x2b\x24\x98\xdf\xdf\x2b\x22\x96\x08\xcf\x19\xbd\x1b\xc3\x73\x52\xca\x5a\x18\x98\xa6\x10\xbd\x71\x8f\x7a\xbb\xdd\xe3\x0e\x90\x70\x36\x4f\xc8\x63\x48\x06\x29\x72\xce\xf2\xdb\x34\x30\x0c\x55\x7a\x7f\x6f\x99\x6f\xb7\x33\xbd\x29\x33\xc9\xd3\xc1\xcd\xfb\x9b\xc1\x0c\xee\xef\xd9\x02\x9e\x47\x3f\x62\x4e\x2a\x93\x17\x64\xbb\x5d\xaa\xf6\x39\xc2\x3b\xcc\x6b\x83\xc3\xd1\xfd\x3d\x72\x8d\xdb\xad\xae\xb3\x92\x99\x61\xcb\xcb\x8e\x0b\xba\xdd\xda\x0d\x34\x4a\x6f\xb7\x49\x4c\xe6\x49\xcc\xd9\xbc\x99\xdc\x37\x4b\x5c\xf3\x1d\x3e\x62\x0b\x90\xff\x6b\x70\xf9\x01\x97\xcb\x0d\x18\x79\x8b\x42\xff\x0f\xc1\x05\x3a\xbc\x78\x67\x8e\xe1\x79\x86\xd5\x25\xbe\x13\x0b\xe9\x50\x73\xd3\xbe\xb5\xc0\x71\x86\xfb\x02\xc8\x34\x20\xb9\xbf\x6f\x24\x6c\xb7\x7f\x0c\x2a\x4e\x91\x61\x8f\xcd\x1e\x64\x3a\xa5\x1b\x98\x7f\x30\x6a\xbb\x85\x1e\xf5\x1f\xc5\x92\xbf\x6d\x9d\xc2\x7d\x7d\x4f\x5c\x9e\xcb\xb0\xdb\x43\x03\x0e\xcd\x0c\xde\xe2\x26\x0d\xee\xef\xfb\x6b\x9b\xd9\x9c\x70\x9e\x11\x67\x22\xb7\xc1\x6e\xd1\x6f\x68\x41\xbb\x62\xda\x65\xdb\xf3\x56\x83\x9d\xda\x9f\x19\x0d\x0e\x22\x9c\x91\xd5\x14\xae\x2e\x7b\xe1\xed\x54\xa0\x78\x7d\x10\x28\xae\x4e\x12\x57\x44\x20\x07\xf7\x37\xd4\x25\xe1\xed\x73\x73\x74\x7a\x17\xf7\xe1\xa2\xd0\x06\xf3\x4e\xb5\x2e\x29\x98\xcc\x40\xae\x50\x2d\xb8\x5c\x4f\x81\xd4\x46\xce\xa0\x24\x77\x5d\x62\x74\x35\x99\xf4\xf5\xb6\x55\x02\xc9\x38\xba\xa0\xa4\xf0\xd7\x1a\xb5\xd1\x5d\x08\xf2\x53\xee\xaf\x8d\x44\x14\x85\x46\x7a\x60\x0d\x2b\xd1\x9a\xd6\x51\xf5\x5c\xdf\x19\xf3\xa4\xee\x0b\x29\xbb\x5c\xa3\xaf\x46\xc3\xba\x97\x16\x05\xf3\xc4\xa8\x1d\xdd\x59\x62\xe8\x17\xe5\x0a\xca\xd6\x02\x0f\xa5\x0a\xfe\x7a\xb3\x7b\xaf\x10\x95\x4f\x44\x2d\x64\xc1\xbd\x26\xb1\xa1\x4f\x90\x6c\x41\x98\x11\x8d\x9f\x23\xde\xa5\x84\x3b\xf1\xee\xf5\xa9\xf2\x0b\x24\xca\x64\x48\xcc\xe7\x28\xb0\xa8\x05\xed\xed\xff\xe6\xfd\xcd\x53\xc5\xd7\x82\xad\x50\x69\x66\x36\x9f\x2b\x1f\xe9\x4e\x01\xff\xbe\xaf\x42\x12\x1b\xf5\x38\xd2\xfa\x2f\x5f\xe9\x68\xff\x5e\xe6\x7a\x35\xff\x67\xb9\x06\x2a\x51\x83\x29\x98\x06\x9b\x91\x7d\x9b\xc4\xc5\x55\x47\x52\xcd\x3f\xda\x89\xef\x4c\x81\x0a\x16\x2e\x1f\x05\xa6\x41\xd5\xc2\xa5\x6b\x52\x80\x29\xd0\x25\x6c\x4d\x42\x17\xc1\x47\x69\x13\xfe\x15\x0a\x03\x25\xe1\x2c\x67\xb2\xd6\x40\x72\x23\x95\x86\x85\x92\x25\xe0\x5d\x41\x6a\x6d\xec\x7a\x7b\x67\x90\x15\x61\xdc\x1d\x20\xe7\x47\x90\x0a\x48\x9e\xd7\x65\x6d\x0b\x16\xb1\x04\x14\xb2\x5e\x16\x8d\x0a\x46\x82\xcf\x65\xb8\x14\xcb\x4e\x0d\x5d\x91\x12\x88\x31\x24\xbf\xd5\x63\x68\xaf\x02\x20\x0a\xc1\x30\xa4\x76\x55\x2e\xcb\x52\x0a\xb8\x52\x14\x2a\xa2\xcc\x06\xf4\x7e\x1e\x4a\xf2\xdc\x25\x46\x11\xbc\x11\x1b\x29\x10\x0a\xb2\x72\x1a\xc2\x47\x5f\x6c\x5a\xbd\xfe\x4a\x72\xcc\xa4\xec\xa8\xa1\x24\x9b\x56\x5c\xa3\xfd\x9a\x99\x82\x79\xab\x54\xa8\x4a\xbb\x94\x02\x67\x25\x33\x3a\x4a\xe2\x6a\x77\x8d\xee\xe2\x33\x0f\x0b\xa9\xd8\x6f\x36\x09\xe6\xfd\x3b\xd3\x1c\xdc\x28\xed\x85\xe8\x9c\xcd\x71\x61\xa6\xf0\xd2\x5f\x88\x87\xf0\x6d\xea\xe3\x53\xd8\x6d\x79\xba\xbe\x83\x8d\x32\x53\xb8\xf2\xc5\x8e\x4f\x26\xa8\xe9\x69\x40\x0f\x10\xe6\x85\x5e\x5f\x57\x77\x9d\x1e\x5d\xc5\x34\xe9\x98\x58\x04\xec\x1b\x65\xc5\x3a\x33\x8e\xa1\x24\xb7\x08\x04\x12\x72\xd0\x3f\x69\x94\x76\xd5\x37\x73\xfd\xa2\xd8\xac\x11\xcd\xb7\xf6\xc4\xa6\x3f\x7a\x86\x4c\x2c\x5f\x5c\x4e\x3c\x10\xed\x83\x65\xff\xe2\x72\xc2\x84\x91\x2f\x2e\x27\x93\xbb\xc9\x67\xfe\x7b\x71\x39\x91\xe2\xc5\xe5\xc4\x14\xf8\xe2\x72\xf2\xe2\xf2\xaa\x5f\x78\xf9\x11\x07\x38\xac\x4b\x4b\x85\xda\x4a\x6b\x21\x1e\x80\x21\x6a\x89\x26\x0d\xfe\x93\x64\xb2\x36\xd3\x8c\x13\x71\x1b\xcc\x9d\xba\x36\xc5\x70\x28\xf0\xb5\x4c\xcb\xa5\x2d\x68\xa0\x22\xda\x42\xc2\x6a\xec\x50\xd2\xf4\xc6\x34\x0c\x75\xad\x94\xac\x85\x0d\x85\x60\xf7\xec\x0e\xa6\x18\x58\x94\x59\xc3\x8c\xa2\x24\x53\xf1\xfc\xad\xac\x36\xa1\x63\xe2\x96\x1f\x99\x51\xd7\x55\x25\x95\x89\xfa\xe6\x24\xb6\x4a\xe6\xa8\xe3\xeb\xc9\xab\xeb\xd7\x8f\xaa\xaf\x6d\x45\xe6\xf6\xd0\x69\x48\x32\xb9\x42\xf0\xf5\x5f\x26\xef\x80\x08\x0a\x0b\xa6\x10\xc8\x9a\x6c\xbe\x49\x62\xea\xea\xf3\xa7\xa3\x76\xd1\x9c\xae\xff\x55\xb0\x6d\x8f\xfc\x18\xaa\x3a\xe3\x4c\x17\x40\x40\xe0\x1a\x12\x6d\x94\x14\xcb\xb9\x1b\xcd\x93\xb8\x79\x85\x4a\x6a\xf3\x98\xfb\xb1\xcc\x90\xd2\x13\x00\xf8\x5a\xfe\x5f\xaf\xd7\x51\x6b\x49\xe7\xfc\x02\x79\x15\xdb\xeb\xaf\x16\xcc\x6c\x62\x7f\x8c\xa4\x88\xbf\x65\x34\xbd\xbc\xbe\x7c\xfd\xfa\xf2\xe5\x3f\x5d\xbf\x7a\x75\x79\xfd\xf2\xd5\x43\xc8\xb0\x9b\x7a\x22\x30\x7c\xee\xfc\x5e\xbe\xa9\x4d\xd1\xaf\x21\xa8\xe9\x12\x36\x1b\x98\xa9\x2d\x43\x54\xf0\x87\x31\x54\x0b\x9b\x7d\x84\x84\x9f\x4c\x1c\xbe\x00\x45\x0e\x46\x8f\x68\xf6\x44\x68\xb5\xf0\xb1\x48\x91\xb5\xb1\x3b\x2c\x50\x18\x96\x13\xeb\x9b\x0e\x4e\x63\xd0\xac\xac\xf8\x06\xf2\x9d\xd7\x4f\xe3\xea\x41\xa7\xfc\x2e\xac\xf6\xdd\xe6\x41\xe6\x82\x7e\x29\x29\xda\x60\xaf\x6b\x9d\x63\xe5\xba\xfe\x36\x92\xde\x6c\x7e\x23\xc2\x30\x81\x6d\xc4\x8d\xe0\x7b\xc1\x37\x50\x6b\x84\x85\x54\x40\x31\xab\x97\x4b\x97\x1d\x28\xa8\x14\x5b\x11\x83\x6d\x98\xd5\x0d\x2a\x3a\x50\xf4\xca\x19\x9b\xe9\xf0\x5e\xe2\xf1\x77\x59\x43\x4e\x04\x18\x45\xf2\x5b\x7f\x52\x6a\xa5\xec\x49\xa9\xd0\xef\xa6\x0b\xf4\x19\x72\xb9\x76\x24\x7e\xdf\x0b\x86\xdc\x45\x7d\x8d\x08\x85\x5c\x43\x59\xe7\xee\x40\xda\xa8\xee\x36\xb1\x26\xcc\x40\x2d\x0c\xe3\xde\x9e\xa6\x56\xc2\xe6\x08\xb8\x17\xa5\x8f\x0a\xbe\x04\xcb\xf9\xc7\x02\x4f\x64\x42\x5d\xa9\x06\x0a\xdf\x7a\x72\xa8\x94\x34\x98\x5b\x87\x02\x59\x12\x26\xb4\xf5\x88\xcb\x03\xb0\xfc\x8c\x52\xae\x7b\x6a\x1e\x76\xfd\x6b\x37\x1d\xc7\xf0\x37\x2e\x33\xc2\x61\x65\x91\x9e\x71\x9b\xc5\x49\x28\xa4\xdd\x7a\xcf\x5a\xda\x10\x53\x6b\x90\x0b\x37\xea\x35\xb7\xeb\x57\x44\x59\x0f\x62\x59\x19\x48\x9b\xee\xab\x1d\xd3\xa8\x56\x4d\x4f\xd9\xbe\x1a\x86\x6a\x7f\xde\x97\xf2\x41\xd0\x8d\x74\x7e\x48\xe1\xe7\x5f\x66\xcf\x1a\xe5\xfe\x82\x0b\x07\x12\x8b\x78\x6f\x04\x53\x10\x03\xb9\x42\x62\x50\x43\xce\xa5\xae\x95\xd7\x99\x2a\x59\x81\xd5\xbb\xe5\xd4\x72\xb6\x13\x95\x93\xdf\x32\x19\x16\x44\x17\xa3\xa6\x9d\xac\xd0\xf9\xad\x9b\x6b\xc7\xcf\x2c\x0e\x87\x96\x01\x4b\x27\x33\x60\x49\xcb\x37\xe2\x28\x96\xa6\x98\x01\x3b\x3f\xef\x88\xcf\xd8\x02\x86\x2d\xc5\xcf\xec\x97\xc8\xdc\x45\x56\x0a\xa4\x29\xf4\xa5\x39\x81\x0d\x1f\x5d\x71\x96\xe3\x90\x8d\xe1\x62\x34\x6b\x67\x33\x85\xe4\xb6\x7d\x6b\x3c\xeb\xff\x73\x7f\xb7\xb3\x7d\xcb\x38\x77\xec\xd9\xc6\xb7\x00\x34\x10\x58\x32\x6d\xa0\x56\x1c\x9a\x53\xed\x9d\xd2\xb9\xc0\xd1\xf5\xad\x72\x84\xd4\xe6\xa1\x41\x59\xbb\x05\xcf\x26\xd2\x28\xe8\xf0\x5f\x3e\x7c\xff\x3e\xd2\x46\x31\xb1\x64\x8b\xcd\xf0\xbe\x56\x7c\x0a\xcf\x87\xc1\xff\xab\x15\x0f\x46\x3f\x4f\x7e\x89\x56\x84\xd7\x38\x6e\x1c\x3e\x85\xb6\x37\x64\x11\x31\x75\x7f\x8f\xa4\x8e\xa1\x79\x9c\xc2\xbe\x02\xdb\xd1\x68\x76\xba\x7d\xd2\xeb\xf9\x28\xd4\x68\x86\x96\xb0\x3b\x1a\x87\x36\x23\x50\xa2\x29\xa4\x3b\xdc\x0a\x73\x29\x04\xe6\x06\xea\x4a\x8a\xc6\x44\xc0\xa5\xd6\x3b\x60\xb6\x14\xe9\x31\x48\x1a\xfa\xd4\x85\xf3\x7f\xc7\xec\x83\xcc\x6f\xd1\x0c\x87\xc3\x35\x13\x54\xae\x23\x2e\xfd\x65\x1c\xd9\x63\x2c\x73\xc9\x21\x4d\x53\x68\xe2\x6c\x30\x82\x6f\x21\x58\x6b\x1b\x71\x03\x98\xda\x47\xfb\x34\x82\x73\x38\x5c\x5e\xd8\x8c\xe0\x1c\x82\xd8\x1f\xbd\x50\x97\x44\x99\x98\x54\x2c\x18\xf9\xb3\xd2\x7a\x45\x8a\x12\xb5\x26\x4b\xec\x6b\xeb\x0a\xa9\x0e\x81\x76\x53\xa5\x5e\x42\x0a\xce\x7b\x15\x51\x1a\x3d\x49\x64\x2b\xf6\x16\x8a\x16\xd0\x8e\x2c\x4d\x41\xd4\x9c\xef\x10\xec\x4f\xcc\xac\xc5\xe6\x1e\x79\xe4\x43\xd3\x37\x69\x0a\xb6\x80\xb5\xf6\xa6\xbb\x95\x16\x19\xbe\xd0\x1e\x45\x36\x8c\xec\x56\x8c\x66\x7d\xa8\xef\x71\x43\xfa\x7b\xec\x90\x1e\xf2\x43\xfa\x00\x43\xd7\xd7\x78\x8c\x9f\xef\x83\xf4\xd8\xb9\x81\x07\xb8\x89\xba\xcc\x50\x3d\xc6\xce\xf7\x35\x1a\x76\xce\xd4\xef\x84\xe9\xad\x1d\xc3\xc5\xeb\xd1\x03\xdc\x51\x29\xf9\x20\x73\x21\xcd\x66\x78\xcf\xc9\xc6\xa6\x58\x30\x30\xb2\x7a\xeb\x1a\x11\x83\xb1\x0b\xd0\x53\xe8\x38\x8c\x5d\xb7\x79\x0a\x03\xf7\x66\xe7\x59\x89\x6e\xd5\xab\xc9\x64\x32\x86\xf6\x27\xbc\x1b\x62\x4f\xa4\xaa\x71\xfb\x80\x3e\xba\xce\x73\x9b\x26\x3c\x45\xa3\x86\x47\xa7\x53\xf3\xfe\x04\xad\xba\xc0\xb1\xa7\x16\xfc\xe9\x4f\x70\x34\xbb\x0f\xe3\x38\x86\x7f\x23\xb6\x6a\xe7\xdc\x35\x1b\x5c\x8f\xa1\xa3\x2f\x99\xd6\xae\x76\xd7\x40\xa5\xc0\x66\xcd\x97\xc5\x84\x23\x1d\x1b\x32\x98\xc3\xe4\x50\x41\x7b\x57\xf6\x62\xc6\x89\x50\xd2\xe3\xbb\x1f\x25\xce\xb6\x7d\x79\x7b\x2b\x59\x89\xf0\x4d\x0a\x41\xd0\x5f\x7c\x44\x61\x09\x3a\x66\x67\x1a\xcd\x47\xef\x8b\x61\x13\x3a\x4f\x05\xb6\xd1\x18\xae\x26\x93\xc9\xe8\x48\x89\xed\xce\xbc\x6f\x2a\x9b\x65\x01\x11\x1b\x77\x3f\x76\xb6\x75\x79\xa6\xcd\x98\xec\xfd\xc6\x21\x97\x9c\xfb\x14\xa7\x59\x6a\x0d\xdc\xf4\x5a\x52\x08\x2f\x66\x27\x42\x6c\xcf\x92\xbd\xad\x1d\xba\xe7\x84\xed\x0f\x5d\xb4\x6f\xb3\x03\xe2\xf0\x62\xcf\x29\x7b\xfe\x3a\xed\x98\xb3\x4e\x6f\xb6\xb3\xe8\x81\xbb\x76\xfe\x3a\xb4\x59\x4f\x7f\xcf\xe7\xfc\xe2\x33\xb7\xd1\x4d\x57\xb5\x2e\x86\x07\x8a\x8e\x66\xc7\xbe\x79\x67\x50\xd9\xa4\x5a\xda\xf8\x65\x7d\x61\x2b\x07\x85\x47\x2e\x71\x99\xbd\xc2\x50\xa1\xa0\xa8\xda\x7c\xc3\x17\x02\x36\x5f\xdc\x73\x99\x2f\x42\xfb\x70\xfa\xc2\x03\xe3\xf2\x35\x29\x10\x00\xe0\xe0\x10\x38\xa0\xee\x21\xd5\x12\x23\x27\x95\x46\x0a\x29\xf8\x2f\x2a\x86\xa3\xa8\x16\xec\x6e\x38\x0a\x9b\xf7\x43\x1e\xed\xfc\xac\xab\x2a\x5b\xb5\xcf\x53\x08\x12\xa3\x80\xd1\x74\x10\xc0\xf9\xa9\x23\x68\x43\xf0\x60\xbe\xd3\xa0\xbf\x14\x20\x31\x74\xee\xba\xa5\xbe\xbc\xfb\x47\x90\x91\xfc\x76\xe9\xea\xa6\xa9\xcd\xc3\x86\x47\x6c\xc9\x8a\x18\xa2\x1c\xd7\xd1\x0c\x76\xe4\x4d\x5d\x99\x5b\xe7\xcc\xc0\x17\xb0\xae\x29\x0b\xdd\xcf\x18\xee\x2d\x93\x8a\xa2\x0a\x15\xa1\xac\xd6\x53\x78\x59\xdd\xcd\xfe\xd1\xfe\xcc\xe3\x5a\xc7\x8f\xaa\x5a\x29\x9c\x1f\x69\xd4\x34\x25\xcf\x21\x48\x62\x4b\xf0\x7b\x6c\xba\xcd\xf6\xbf\xe4\x80\x13\x0d\x72\xe8\xbe\xb3\x68\xc6\x4b\x46\x29\x47\xab\xf0\x8e\xbd\x3d\x8c\xd6\xff\xfd\x23\xb5\x2f\x12\x9a\xce\xf8\x6e\xcd\x16\x90\x6b\x7c\x64\x41\xd7\x64\x1f\x58\x00\x84\x76\xcb\xcc\xd9\xbc\xa9\xcd\xdd\xb0\x1a\x38\x5b\x34\xdf\xe5\xd0\x5a\xb9\xc4\x6b\x18\x36\x00\x1b\xc3\x40\xdb\x44\x90\xea\xc1\x28\x2a\xea\x92\x08\xf6\x1b\x0e\x6d\x5c\x1a\x79\x5b\xb9\xae\x7d\x70\x7c\x25\x1f\x29\xb3\x6b\xa7\x0f\xda\x18\x37\x68\x8c\x38\x68\xbd\xfb\x72\xd7\x0a\x98\xc2\x64\x36\xf8\x42\x0b\x9d\x96\x12\x66\x44\x41\xff\x25\x6c\x83\x2f\x28\x69\xa5\xb7\x73\x19\x51\x03\xdf\xf8\x70\xc9\xbb\x90\xeb\x74\x70\x35\xe9\x94\xf4\x8e\x76\x7e\x1e\x34\x58\x3b\x72\x86\xd5\xb2\x3d\x9a\x73\xb8\x9a\x7c\x0d\x6d\x7d\xf3\xe4\x60\x07\x46\xb1\x0a\x29\x90\xdc\xb0\x15\xfe\x37\x6c\xe4\x2b\x18\xf9\x8b\x55\xb4\x38\x6c\x8d\xe7\x60\xba\xa7\xaf\x9d\xed\x6c\xfb\xff\xed\x79\x83\xd8\x59\xf8\x1c\x82\x93\x1b\x79\x10\x89\x07\x84\x07\x47\xfb\xe1\x73\xef\x7e\x86\x0a\x0e\x63\x8a\xcd\x76\xbb\x1f\x50\x47\x51\x61\x4a\x3e\x0c\x12\xe3\xbe\xb8\xb2\x3a\x77\x1c\x1c\x03\x3f\xbc\x9f\xd2\x6d\xf7\x0b\x19\x5b\xdc\xe3\x41\xd1\x05\xbd\xe4\xa4\x2b\xcc\xda\x4c\x04\xb6\xbb\x0f\xd3\xe2\x18\x3e\x18\xa2\x0c\x10\xf8\xe9\x1d\xd4\x15\x25\xc6\xff\xf2\x63\xe3\xa3\xff\x65\xa5\xfd\x72\x2d\x23\x4a\xc3\x42\xaa\x35\x51\xb4\x69\xe7\x98\x02\x37\xee\x97\x9f\x36\xf5\xd3\x68\xde\xd9\x5b\x6c\x45\xf8\xf0\xa8\x08\x7c\x3e\x1c\x44\x7d\x97\x0f\x46\x11\x92\xbc\x38\x26\x74\x11\xab\x93\x9b\xc2\x7b\x57\x02\x0c\x9f\x0f\x4d\xc1\xf4\x28\x22\xc6\xa8\xe1\x60\x0f\x0c\x83\x91\xf5\xeb\x45\xaf\x24\xeb\x96\x27\x7b\xc7\xea\x31\x1e\xbb\x64\xba\x4b\x04\x5a\xf2\x5c\xeb\xa1\xc7\xd5\x60\xdc\xe3\xbd\x0f\xab\xc1\x8b\x41\xe7\xa8\xdd\xf1\xde\xed\x23\x3d\xa9\xc9\x1e\xeb\x81\x3d\x65\x83\x23\xf1\x84\xd2\xb7\xf6\xfc\x0c\x83\x13\x27\xfd\x10\x1d\xa3\xce\xd8\xfe\xbe\x7e\xd4\xca\x4c\x50\xbc\x7b\xc8\xc4\x8c\x0e\x46\x91\xae\x33\xdf\xb8\x18\xbe\xea\x0a\xb0\x96\xcc\x81\xf7\x30\x14\x1c\x25\x14\x56\xc4\x7e\x52\x11\x1e\x24\x21\x8f\x44\x8d\x46\xa4\xdf\xd5\x76\x6c\x0d\x3e\x19\x75\x7d\xaf\xef\xb4\x4d\xae\xfc\x2f\x05\x6b\xcc\xb4\x6b\x2b\x40\x83\x77\xd7\xea\xf1\x2d\x9d\x37\x3f\xbc\xeb\xb5\x75\xba\x13\x31\x74\xdc\xbb\x8f\x4a\x4f\x35\x4d\x4e\x7e\xc5\xba\x5e\xaf\xa3\xa5\x94\x4b\xee\xbf\x5f\xed\xba\x2a\x31\xa9\x58\xf4\x49\x07\x40\xf4\x46\xe4\x40\x71\x81\x6a\xde\x63\xdf\xb4\x5a\x92\xd8\x7f\x5f\x99\xc4\xfe\xa3\xf1\xff\x0a\x00\x00\xff\xff\x71\x2b\x42\x8d\x45\x2e\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x7c, 0x5f, 0xd1, 0x94, 0x68, 0xc1, 0x9c, 0x7c, 0xa5, 0x8b, 0xd4, 0xb5, 0xa8, 0x49, 0x95, 0x73, 0x93, 0xf, 0xbf, 0x90, 0xaa, 0xa5, 0xe, 0xec, 0x70, 0x86, 0xa4, 0x65, 0x75, 0x8f, 0xb8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
