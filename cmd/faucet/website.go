// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.633kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x7b\x73\xdb\x38\x92\xff\xdb\xf9\x14\x3d\xbc\xec\x48\xba\x98\xa4\xde\x96\x25\x51\x53\x91\xed\xec\xfa\xaa\x2e\x9b\xda\x64\xea\xf6\x6a\x76\xea\x0a\x24\x5a\x12\x62\x12\xe0\x00\xa0\x6c\xad\x4a\xdf\xfd\x0a\xe0\x43\xd4\xc3\x9e\x3c\x66\xeb\xea\xf2\x87\x43\x02\x8d\xee\x46\xff\x1a\xdd\x8d\xa6\xa6\x3f\xdc\xfe\xf5\xe6\xd3\x7f\x7f\xb8\x83\x95\x4e\xe2\xd9\xab\xa9\xf9\x0f\x62\xc2\x97\x81\x83\xdc\x99\xbd\xba\x98\xae\x90\xd0\xd9\xab\x8b\x8b\x69\x82\x9a\x40\xb4\x22\x52\xa1\x0e\x9c\x4c\x2f\xdc\x91\xb3\x9f\x58\x69\x9d\xba\xf8\x5b\xc6\xd6\x81\xf3\x77\xf7\xe7\xb7\xee\x8d\x48\x52\xa2\x59\x18\xa3\x03\x91\xe0\x1a\xb9\x0e\x9c\xfb\xbb\x00\xe9\x12\x6b\xeb\x38\x49\x30\x70\xd6\x0c\x1f\x53\x21\x75\x8d\xf4\x91\x51\xbd\x0a\x28\xae\x59\x84\xae\x7d\xb9\x04\xc6\x99\x66\x24\x76\x55\x44\x62\x0c\x3a\xce\xec\x95\xe1\xa3\x99\x8e\x71\xb6\xdd\x7a\xef\x51\x3f\x0a\xf9\xb0\xdb\x8d\xe1\x1d\xc9\x22\xd4\x53\x3f\x9f\xb3\x64\x31\xe3\x0f\xb0\x92\xb8\x08\x1c\xa3\xac\x1a\xfb\x7e\x44\xf9\x67\xe5\x45\xb1\xc8\xe8\x22\x26\x12\xbd\x48\x24\x3e\xf9\x4c\x9e\xfc\x98\x85\xca\xd7\x8f\x4c\x6b\x94\x6e\x28\x84\x56\x5a\x92\xd4\xef\x79\x3d\xef\xca\x8f\x94\xf2\xab\x31\x2f\x61\xdc\x8b\x94\x72\x40\x62\x1c\x38\x4a\x6f\x62\x54\x2b\x44\xed\x80\x3f\xfb\x36\xb9\x0b\xc1\xb5\x4b\x1e\x51\x89\x04\xfd\xbe\x77\xe5\xb5\xad\xc8\xfa\xf0\xcb\x52\x8d\x58\x15\x49\x96\x6a\x50\x32\xfa\x62\xb9\x9f\x7f\xcb\x50\x6e\xfc\x9e\xd7\xf1\x3a\xc5\x8b\x95\xf3\x59\x39\xb3\xa9\x9f\x33\x9c\x7d\x17\x6f\x97\x0b\xbd\xf1\xbb\x5e\xdf\xeb\xf8\x29\x89\x1e\xc8\x12\x69\x29\xc9\x4c\x79\xe5\xe0\x1f\x26\xf7\x39\x0c\x3f\x1f\x43\xf8\x47\x08\x4b\x44\x82\x5c\x7b\x9f\x95\xdf\xf5\x3a\x23\xaf\x5d\x0e\x9c\xf2\xb7\x02\x0c\x68\x46\xd4\x85\xb7\x46\xa9\x59\x44\x62\x37\x42\xae\x51\xc2\xd6\x8c\x5e\x24\x8c\xbb\x2b\x64\xcb\x95\x1e\x43\xa7\xdd\xfe\xd3\xe4\xdc\xe8\x7a\x95\x0f\x53\xa6\xd2\x98\x6c\xc6\xb0\x88\xf1\x29\x1f\x22\x31\x5b\x72\x97\x69\x4c\xd4\x18\x72\xce\x76\x62\x67\x65\xa6\x52\x2c\x25\x2a\x55\x08\x4b\x85\x62\x9a\x09\x3e\x36\x1e\x45\x34\x5b\xe3\x39\x5a\x95\x12\x7e\xb2\x80\x84\x4a\xc4\x99\xc6\x23\x45\xc2\x58\x44\x0f\xf9\x98\x3d\xbf\xf5\x4d\x44\x22\x16\x72\x0c\x8f\x2b\x56\x2c\x03\x2b\x08\x52\x89\x05\x7b\x48\x09\xa5\x8c\x2f\xc7\x30\x4c\x8b\xfd\x40\x42\xe4\x92\xf1\x31\xb4\xf7\x4b\xa6\x7e\x69\xc6\xa9\x9f\x87\xaa\x57\x17\xd3\x50\xd0\x8d\x19\xa1\x6c\x0d\x8c\x06\x8e\xc4\x88\xa4\x3a\x5a\x91\xff\xc1\x18\x0d\x22\x06\x0a\xca\xd6\x96\xb8\x24\xca\x23\x0f\x9d\x0b\xba\x71\x20\x8a\x89\x52\x81\x73\x84\x8b\x8d\x5b\xf9\x8a\x82\xc0\x2c\x22\x8c\x97\x53\x07\x73\x52\x3c\x3a\x60\xb5\x0b\x9c\x5c\x73\x37\x14\x5a\x8b\x64\x0c\x1d\xb3\xa7\x62\xc9\x11\xbf\xd8\x8d\x97\x6e\xa7\x5b\x4e\x5e\x4c\x57\x9d\x92\x89\xc6\x27\xed\x5a\x50\x2b\x38\x9d\xd9\x94\x95\x6b\x17\x04\x16\xc4\x0d\x89\x5e\x39\x40\x24\x23\xee\x8a\x51\x8a\x3c\x70\xb4\xcc\xd0\xec\x98\xcd\xa0\x1e\x25\xab\x20\xb9\xea\x94\x9a\xe4\x46\x39\x7e\x3c\xda\xd3\xf3\x6a\x8f\xa0\x78\x10\x8b\x85\x42\xed\xd6\x76\x51\x23\x66\x3c\xcd\xb4\xbb\x94\x22\x4b\xab\xf9\x8b\xa9\x1d\xb5\x40\x64\x32\x76\x8a\xbc\x60\x1f\xf5\x26\x2d\x36\x5f\xe1\xb2\x10\x32\x71\x8d\xed\xa5\x88\x1d\x48\x63\x12\xe1\x4a\xc4\x14\x65\xe0\xdc\x5b\x3e\x1b\x91\x49\x98\x33\x4e\x78\x84\xf0\x31\x21\x52\xc3\xcd\x8a\x30\x0e\x84\x52\xe3\xc8\x9e\xe7\xd5\x64\x5b\xaf\x3e\xd5\xce\x0d\x35\xdf\x53\x5d\x4c\xc3\x4c\x6b\x51\x11\x86\x9a\x43\xa8\xb9\x4b\x71\x41\xb2\x58\x03\x95\x22\xa5\xe2\x91\xbb\x5a\x2c\x97\x26\xeb\xe5\x7a\xe7\x8b\x1c\xa0\x44\x93\x62\x2a\x70\x4a\xda\x12\x28\xa2\x52\x91\x66\x69\x01\x55\x3e\x88\x4f\x29\xe1\x14\xa9\x01\x36\x56\xe8\xcc\xfe\xcc\xd6\x08\x09\xc2\xfc\xfd\xfc\xe2\x18\xf5\x88\x48\xd4\x6e\x9d\xe5\x09\xf6\x53\x3f\x57\x25\xdf\x10\x14\xff\xa6\x59\x5c\x72\xaa\x36\x90\x20\xcf\xe0\xe0\xcd\x95\x26\xde\x54\xb6\x00\xd8\x6e\x25\xe1\x4b\x84\xd7\x8c\x3e\x5d\xc2\x6b\x92\x88\x8c\x6b\x18\x07\xe0\xbd\xb5\x8f\x6a\xb7\x3b\x10\x03\x30\x8d\x19\xcc\xa6\xe4\x25\x5f\x06\xc1\xa3\x98\x45\x0f\x81\xa3\x19\xca\x60\xbb\x35\xdc\x77\xbb\x89\xda\x24\xa1\x88\x83\xc6\xfc\xfd\xbc\x31\x51\x59\x98\x30\xdd\x6c\x39\xb3\xed\xb6\x90\xbb\xdb\x4d\x7d\x32\x9b\xfa\x31\x9b\x6d\xb7\xc8\xe9\x91\xec\xa9\x9f\xc5\x7b\xac\x7d\x03\xf6\xff\x37\xe8\x3f\xe0\x72\xb9\x01\x2d\x1e\x90\xab\xff\x23\xe8\xf7\x90\xe7\x70\x5c\xc2\xeb\x10\xd3\x2e\xde\xf3\x85\xb0\xc0\xcf\xcb\xb7\x12\x7b\x6b\xb8\x98\x7d\x31\xe8\x05\xcc\xdb\x6d\x21\x61\xb7\x9b\xc0\x01\xda\x95\xbc\xc2\xc9\x3e\x6a\xb9\xdb\x41\x8d\xfe\x5b\xdd\xa0\x16\xec\xbe\x30\x06\x1e\xc5\x75\x2d\xd2\x31\xf4\xba\xb5\xa0\x7e\x2e\x3c\x0e\x8f\xc2\x63\xef\x2c\x71\x4a\x38\xc6\x60\xff\xba\x2a\x21\x71\xf9\x5c\x38\x5b\x2d\x6c\x1d\x2f\x72\x43\x9b\xbb\x0a\xd5\xaa\xfc\xd9\x9e\x80\x58\xa3\x5c\xc4\xe2\x71\x0c\x24\xd3\x62\x02\x09\x79\xaa\x6a\x88\x5e\xbb\x5d\xd7\xdb\x14\xd4\x24\x8c\xb1\x48\x9c\xbf\x65\xa8\xb4\xaa\x02\x6f\x3e\x65\xff\x9a\xf8\x4b\x91\x2b\xa4\x47\xd6\x30\x12\x8d\xdf\x59\xaa\x9a\xc5\xf7\x36\x3e\xa7\xfb\x42\x88\x2a\xc3\xd6\xd5\x28\x58\xd7\x2a\x08\x67\x36\xd5\x72\x4f\x77\x31\xd5\xf4\xab\x32\xa4\x34\x65\xf3\x73\x09\x32\x0f\x08\x66\xef\x29\xa2\xcc\x6b\x36\xe3\x29\x60\x5f\xa7\xbe\xa6\xdf\x21\xd9\x04\x82\x90\x28\xfc\x12\xf1\xb6\x7a\xda\x8b\xb7\xaf\xdf\x2b\x7f\x85\x44\xea\x10\x89\xfe\x12\x05\x16\x19\xa7\xb5\xfd\xcf\xdf\xcf\xbf\x57\x7c\xc6\xd9\x1a\xa5\x62\x7a\xf3\xa5\xf2\x91\xee\x15\xc8\xdf\x0f\x55\x98\xfa\x5a\xbe\xec\x69\xff\x82\xa3\xfd\x7b\xf5\x5a\x6f\xf6\x17\xf1\x08\x54\xa0\x02\xbd\x62\x0a\x4c\xb5\xf5\xd3\xd4\x5f\xf5\x2a\x92\xd4\xc4\xc4\xc3\x2b\xa1\x46\xa5\x39\x6a\x2f\x54\x91\x8a\x08\xcf\x2f\x16\x79\xad\xe2\xb7\x9f\x86\x11\x8e\xe8\xdb\xee\xe8\xae\xbb\x18\x0d\xfb\xfd\x6e\x7b\xd4\x6f\x47\xef\xae\xfa\xfd\xab\x3e\xbe\x5b\x0c\x16\xb7\xa3\xf6\xdd\x70\x30\x1f\x39\xb3\xf9\xa7\x1b\x13\x05\x2f\xbf\x52\x00\x1d\x0e\xa3\xe1\xbc\xff\xae\x1d\xe2\xe8\xe6\x6e\x10\xf6\xae\x6f\x07\xdd\xbb\xf6\x3b\xda\xe9\xf5\xfb\x51\x6f\x74\x7d\xdd\xbd\x9e\xf7\xae\x46\xce\xec\xee\xd3\x5f\xbe\x45\x00\x19\xf5\x06\x57\x83\xfe\x75\xfb\xf6\x8a\x2e\xfa\x77\xdd\x77\xfd\xab\xf0\xea\xb6\x37\xc2\x45\x6f\xd0\x21\xdd\xab\x6e\x37\x7a\xdb\x1f\x84\xd7\xce\xec\xef\x7f\xfb\xf0\x2d\x02\x90\x76\xfb\x8b\xa8\x37\xa4\x03\xc4\x6e\xa7\x83\xa4\x3b\x20\xa3\x76\xb7\x77\xbd\x08\x47\x51\x3f\x5a\xd0\x51\x7b\xd1\xe9\x22\x3a\xb3\xf9\xcf\x1f\x6f\xbf\x45\x42\xaf\x77\x35\xec\xb4\x69\xf7\x2a\x1a\x8e\xba\x77\xbd\xfe\xd5\xcd\x75\x74\x3b\x6c\xcf\x6f\xfb\x61\x2f\xec\xb4\xaf\x6e\xae\x69\xaf\x4f\x6f\xa9\x33\xfb\xf9\xe3\xed\xa7\x6f\x91\x30\xec\x0f\xfa\xfd\xeb\xe1\x35\xd2\xab\xbb\xf9\x62\xb0\x68\x8f\x7a\xc3\xab\xeb\x6e\xaf\xd7\xeb\x0e\x7a\x83\xe1\x5d\x78\x77\xd5\x1b\x5d\xf7\xda\x56\xc2\x37\xe1\x7c\x77\x33\xa0\x37\xe1\xe0\x36\x5c\xf4\xe7\x9d\x4e\xff\xe6\x9a\xb6\xdf\x0d\x07\xf3\xe8\xe6\x6d\xd8\xbf\xbe\xbb\x19\xf4\xdf\x0d\xdf\xb6\x47\xc3\x2b\x67\x76\xfb\xf6\xde\x08\x00\x22\x11\x98\x52\x19\x52\x20\x0a\xe6\x77\x1f\xba\xed\xbc\x10\xf1\xa6\x7e\x5a\xf3\x68\xb8\x31\x59\x1c\xb4\x80\x25\x6a\xa0\xa8\x09\x8b\x81\x84\x22\xd3\x70\xa2\xe3\x92\xe9\x55\x16\x5a\xd5\xc2\xbc\x46\x77\x23\x53\x9d\xfb\xf3\xbb\x0f\xca\x0f\x63\x11\xfa\x09\x51\x1a\xa5\x6f\xe5\x79\x09\x75\x66\xf6\xc9\x68\x54\x97\xbb\xdd\xb2\x05\x78\x7f\x2b\xaf\x77\xbb\xdd\x14\x93\xd9\xa7\x15\xc2\xc2\x5e\x6d\x80\x29\x90\x19\xe7\x8c\x2f\x41\xe2\x4d\x4e\x04\xa9\x14\x1a\x23\x73\x75\x05\xb2\x24\x8c\x2b\x0d\xa1\xd0\xca\x9b\xfa\x98\x1c\x54\x0e\xe7\x03\x46\xf5\x54\x5d\x21\xcb\x5e\x81\x9d\xf6\x7d\xf8\x73\x2c\x42\x12\xc3\xda\xc4\xb8\x30\x36\x61\x40\x80\xb9\x9e\x80\x5e\x21\x44\x99\x94\xc8\x35\x28\x4d\x74\xa6\x40\x2c\xec\x68\xae\xaf\x59\xbf\x26\x12\x88\xd6\x98\xa4\x1a\x82\xe2\xa6\x6b\xc6\x14\xca\x75\x71\x7f\x37\xaf\xa6\x42\x3e\x9c\xcf\xab\x27\xc7\xa9\x46\xca\xe4\x0d\x01\xfc\xf2\x6b\x35\x5a\x98\x6a\xf2\xaa\x50\xf6\x16\x17\x8c\x23\x10\x13\x5f\x73\xa3\xe8\x15\xd1\x10\x49\x24\x1a\x15\x44\xb1\x50\x99\xcc\xf7\x60\xea\x42\x30\xfb\x28\x39\x97\x3c\xcd\x44\x6a\xf5\x29\x99\x34\x57\x44\xad\x5a\xc5\x55\x5e\xa2\xce\x24\xdf\xcf\x95\xe3\x17\x0b\x21\xa1\x69\x18\xb0\xa0\x3d\x01\x36\x2d\xf9\x7a\x31\xf2\xa5\x5e\x4d\x80\xbd\x79\x53\x11\x5f\xb0\x05\x34\x4b\x8a\x5f\xd8\xaf\x9e\x7e\xf2\x8c\x14\x08\x02\xa8\x4b\xb3\x02\x0b\x3e\x2a\x8d\x59\x84\x4d\x76\x09\x9d\xd6\xa4\x9c\x0d\x25\x92\x87\xf2\xad\x40\x3a\xff\xcf\xfe\xdd\xe5\xa6\xa1\x22\xca\x6c\xf3\x66\x89\xfa\x2e\xef\x1a\xcc\x37\xf7\xb4\x79\xd0\x27\x68\x79\x36\x59\x78\x45\xcf\x03\x02\x70\xb8\xe0\xe8\xe4\x2c\x72\x10\x0a\x83\xdf\x90\x38\x0e\x49\xf4\x50\x37\x52\xa9\xf2\xaa\xa0\xf1\x24\x72\x8a\xb2\xd9\x38\x69\x58\x34\x2e\xcb\xdd\x35\x14\xd3\xf8\x80\x9b\x06\x8c\xa1\xb1\xdd\xd6\x9d\xbf\x71\x59\x90\x44\x85\x2c\x43\x43\x94\x62\x4b\x5e\x4a\xcf\x29\x76\xb9\x31\x76\x7b\x35\x0f\xa9\xea\x3a\x2e\x0b\xf6\xa5\xae\xdf\x6a\x97\xbc\x9e\x99\xbc\xcc\xe3\xb4\x51\xf3\xbc\x85\x0d\xa3\x82\x1a\x02\x58\x56\x7e\x9d\x6f\xec\xc0\xb9\xed\x09\x3b\x70\xef\xfc\x5e\xa1\x80\xc0\x92\x29\x0d\x99\x8c\x8d\x83\x1b\xba\xfc\x9c\x55\xa7\xca\xd2\x9d\xc3\x2c\xa7\xf3\x14\x72\xda\xfc\x8f\x8f\x7f\x7d\xef\x29\x2d\x19\x5f\xb2\xc5\xa6\xb9\xcd\x64\x3c\x86\xd7\x4d\xe7\xdf\x32\x19\x3b\xad\x5f\xda\xbf\x7a\x6b\x12\x67\x78\x59\x1c\xd2\x31\x94\x57\x28\x73\x8a\xc7\xf6\xef\x49\x24\xbb\x2c\x4f\xea\xb8\x7c\x28\x42\xd3\xae\xd5\x9a\x9c\x50\x1f\xbb\x91\x42\xdd\x34\x64\x55\x30\x3b\x36\x09\x81\x04\xf5\x4a\x50\xb3\x6d\x89\x91\xe0\x1c\x23\x0d\x59\x2a\x78\x61\x01\x88\x85\x52\x35\x2f\x2e\x28\x9e\xb5\x04\x04\xc0\xf1\x11\xfe\x0b\xc3\x8f\x22\x7a\x40\xdd\x6c\x36\x1f\x19\xa7\xe2\xd1\x8b\x45\x44\xcc\x02\xcf\x04\x5e\x11\x89\x18\x82\x20\x80\x22\x19\x38\x2d\xf8\x09\x9c\x47\x65\xd2\x82\x03\x63\xf3\x68\x9e\x5a\xf0\x06\x8e\x97\xaf\x84\xd2\xf0\x06\x1c\x3f\x0f\x96\xe6\x72\x24\xb5\x4f\x52\xe6\xb4\x72\x47\x2e\x31\x11\x3c\x41\xa5\xc8\x12\xeb\xda\xe2\x1a\xb9\xae\x62\x84\xd9\x54\xa2\x96\x10\x80\xc5\x2e\x25\x52\x61\x4e\xe2\x99\x22\xbd\x0c\x16\x26\xe4\x58\xb2\x20\x00\x9e\xc5\xf1\x3e\xc6\xe4\x31\x6d\x52\x46\x8f\x03\x72\xcf\x96\xce\xf0\x43\x10\x80\xa9\x59\x8d\xbd\xe9\x7e\xa5\xf1\x8b\xbc\xb6\x6e\x79\xa6\x6c\xde\xaf\x68\x4d\xea\xc1\xe8\x80\x1b\xd2\xdf\x63\x87\xf4\x98\x1f\xd2\x67\x18\xda\xab\xcc\x4b\xfc\xf2\xab\x4f\x8d\x9d\x1d\x78\x86\x1b\xcf\x92\x10\xe5\x4b\xec\xf2\xa3\x5f\xb0\xb3\xa6\xbe\xe7\xba\xb6\xf6\x12\x3a\xc3\xd6\x33\xdc\x51\x4a\xf1\x2c\x73\x2e\xf4\xa6\xb9\x8d\xc9\x46\x64\x7a\x0c\x0d\x2d\xd2\x1b\x7b\xf7\x68\x5c\x82\x91\x35\x86\x8a\xc3\xa5\x6d\xc9\x8c\xa1\x61\xdf\xcc\x3c\x4b\xd0\xae\x1a\xb4\xdb\xed\x4b\x28\x1b\xdc\x73\x62\xce\xa3\xcc\x70\xf7\x8c\x3e\x2a\x8b\x22\x54\xcf\x5a\xef\x8b\x34\x2a\x78\x54\x3a\x15\xef\xdf\xa1\x55\x95\xea\x0f\xd4\x82\x1f\x7f\x84\x93\xd9\x43\x37\xf6\x7d\xf8\x4f\x22\x1f\xc0\xb6\x19\x24\xae\x99\xc8\xd4\xbe\x70\x48\x98\x52\xa6\x76\x22\x0a\xa8\xe0\x58\xac\xf9\xba\xac\x7d\xa2\x63\x41\x06\x33\x68\x1f\x2b\x68\x22\x65\x2d\xab\x9f\x49\xf6\x35\xbe\x87\x79\xfc\x62\x57\x97\x77\xb0\x92\x25\x08\x3f\x04\xe0\x38\xf5\xc5\x27\x14\x86\xa0\x62\x76\xa1\x50\x7f\xca\xb1\x68\x16\xc5\xcd\xb9\xd2\xa3\x75\x09\xbd\x76\xbb\xdd\x3a\x51\x62\xb7\x37\xef\xdb\x34\x45\x4e\x81\xf0\x8d\x8d\x8f\x95\x6d\x19\xd7\x02\x44\x66\xe2\x6c\x44\x62\x88\x44\x1c\xe7\x45\x69\xb1\xd4\xd6\x6a\x22\x49\x04\x87\x00\xdc\xce\xe4\x4c\x11\x54\xb3\x64\x6d\x6b\xc7\xf0\x9c\xb1\xfd\x31\x44\x87\x36\x3b\x22\x76\x3b\x07\xa0\x1c\xe0\x75\x1e\x98\x8b\x4a\x6f\xb6\xb7\xe8\x11\x5c\x7b\xbc\x8e\x6d\x56\xd3\x3f\xe7\xf3\xa6\xf3\x85\xdb\xa8\xa6\xd3\x4c\xad\x9a\x47\x8a\xb6\x26\xa7\xd8\xdc\x6b\x94\x44\xa3\x6d\x8f\x59\x2c\x90\x6b\x26\xf1\x04\x12\x20\xdc\x14\xbd\x6e\x5e\x9e\x95\xe5\x04\x35\x47\xc3\xb6\x1e\x0e\x20\xb3\xdf\xaf\x0f\xdc\xe9\x2b\x0f\x8c\xad\xa8\x05\x47\x00\x80\xa3\x43\x60\x1d\xf5\xc0\x53\x0d\x31\xc6\x24\x55\x48\x21\x80\xfc\x7b\x63\xb3\xe5\x65\x9c\x3d\x35\x5b\x6e\xf1\x7e\xcc\xa3\x9c\x2f\xd2\xa6\x45\x2c\x57\xfb\x4d\x00\xce\x54\x4b\x60\x34\x68\x38\xf0\xe6\xdc\x11\x34\x29\xb8\x31\xdb\x6b\x50\x5f\x0a\x30\xd5\x74\x66\x1b\x24\x79\x17\xe5\x1f\x8e\xa9\x27\x97\x52\x64\x9c\x8e\x4d\x99\xd5\x3c\x61\x4b\xd6\x44\x13\x69\xb9\xb6\x26\xb0\x27\x77\x15\xfb\x27\x8e\x21\x32\xe0\x4c\x20\xef\xff\xd9\x3e\x0c\x54\x9d\x4b\xfb\x16\x0a\x49\x51\xba\x92\x50\x96\xa9\x31\xf4\xd3\xa7\xc9\x3f\xca\xef\x7b\xb6\x5b\xf4\xa2\xaa\xa9\xc4\xd9\x89\x46\x51\x64\x3f\x67\xbc\x01\x67\xea\x1b\x82\xdf\x63\x53\x6d\xb6\xfe\x9d\x13\xce\xf4\xc4\xa0\xfa\xa0\x58\x8c\x27\x8c\xd2\x18\x8d\xc2\x7b\xf6\xe6\x30\x1a\xfc\xeb\x47\xea\x50\x24\x14\xcd\xb0\xfd\x9a\x1d\x60\xac\xf0\x85\x05\x55\x5f\xad\x61\x1c\xc0\x35\x5b\x66\xd6\xe6\x45\x27\xcb\x0e\xcb\x86\xb5\x45\xf1\xd5\x9a\x66\xd2\x16\x5e\x4d\xb7\x70\xb0\x4b\x68\x28\x53\x08\x52\xd5\x68\x79\xab\x2c\x21\x9c\xfd\x13\x9b\x26\x2f\xb5\x72\x5b\xd9\x46\x9d\x73\x1a\x92\x4f\x94\xd9\x77\xd0\x1a\x65\x8e\x6b\x14\x46\x6c\x94\xe8\x1a\x20\x6b\x5f\x7c\x1b\x5f\x69\xa1\xf3\x52\xdc\x90\x48\xa8\xbf\xb8\x65\xf2\x05\x29\x8c\xf4\x72\x2e\x24\xb2\x91\x37\x29\x6d\xe9\xce\xc5\x63\xd0\xe8\xb5\x2b\x25\x73\xa0\x2d\xce\x8d\xc2\xd7\x4e\xc0\x30\x5a\x96\x47\x73\x06\xbd\xf6\x1f\xa1\x2d\x25\x7c\x89\xc7\x3b\xd0\x92\xa5\x48\x81\x44\x9a\xad\xf1\x5f\xb0\x91\x3f\xc0\xc8\x5f\xad\xa2\xf1\xc3\xd2\x78\xd6\x4d\x0f\xf4\x35\xb3\x95\x6d\xff\xdd\x9c\x37\xf0\xad\x85\xdf\x80\x73\x76\x23\xcf\x7a\xe2\x11\xe1\xd1\xd1\x7e\xfe\xdc\xdb\xce\xb3\x73\x9c\x53\x4c\xb5\x5b\x7d\x33\x69\x79\x2b\x9d\xc4\x4d\x67\xaa\xed\xef\x11\x8c\xce\x15\x07\xcb\x20\x1f\x3e\x2c\xe9\x76\x87\x17\x99\x28\x16\x0a\x8f\x2e\x5d\x50\x2b\x4e\xaa\x8b\x59\x59\x89\xc0\x6e\xff\xb3\x0d\xdf\x87\x8f\x9a\x48\x0d\x04\x7e\xbe\x87\x2c\xa5\x44\x9b\xec\x25\xc0\xe4\x47\x9b\xc5\xaa\xdf\x75\x84\x44\x2a\x58\x08\xf9\x48\x24\x85\x8c\x6b\x16\x9b\xf9\x8d\xed\xfe\x95\xa5\x9f\x42\x7d\x6f\xa2\xd8\x9a\xc4\xcd\x93\x4b\xe0\xeb\x66\xc3\xab\x43\xde\x68\x79\x48\xa2\xd5\x29\xa1\xcd\x58\x95\xdc\x00\xde\xdb\x2b\x40\xf3\x75\x53\xaf\x98\x6a\x79\x44\x6b\xd9\x6c\x1c\x38\x43\xa3\x65\x70\xed\xd4\xae\x64\xd5\xf2\xe9\xc1\xb1\x7a\x89\xc7\xbe\x98\xae\x0a\x81\x92\x3c\x52\xaa\x99\xfb\x55\xe3\xb2\xc6\xfb\xd0\xad\x1a\x7f\x6a\x54\x40\xed\x8f\xf7\x7e\x1f\xc1\x59\x4d\x0e\x58\x37\xcc\x29\x6b\x9c\x88\x27\x94\xde\x98\xf3\xd3\x74\xce\x9c\xf4\x63\xef\x68\x55\xc6\xce\xe3\xf5\x8b\x56\x66\x9c\xe2\xd3\x73\x26\x66\xb4\xd1\xf2\x54\x16\xe6\x6d\x8b\xe6\xa0\xba\x80\x95\x64\xd6\x79\x8f\x53\xc1\x49\x41\x61\x44\x1c\x16\x15\xee\x51\x11\xf2\x42\xd6\x28\x44\xe6\xbb\xda\x5d\x1a\x83\xb7\x5b\x55\x67\xf2\x4e\x99\xe2\x8a\xa9\x15\x10\x78\xc4\x50\xd9\xb6\x02\x14\xfe\x6e\x3b\x39\x79\xc7\xe6\xed\x87\xfb\x5a\xd7\xa6\x3a\x11\x4d\xcb\xbd\xfa\xc9\xd5\xb9\x96\xc9\xd9\xdf\x78\x7d\x56\x5e\xd5\x48\x89\x44\xe2\x77\x7c\x92\x32\xef\xb3\xfa\x49\xf0\x58\x10\x1a\x9c\x74\xf4\x7e\xcc\xcb\xc2\x00\x9f\xd2\x98\x45\x4c\x3b\x76\x53\x44\x6d\x78\x04\x14\x17\x28\x67\x35\x25\x8a\x86\xcc\xd4\xcf\x7f\xa3\x34\xf5\xf3\x1f\x5e\xfe\x6f\x00\x00\x00\xff\xff\x54\x9d\xfc\x68\x89\x29\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xd2, 0x12, 0x94, 0xa1, 0xb4, 0x19, 0x67, 0xed, 0xc4, 0x9, 0xb1, 0x87, 0xc1, 0x4f, 0xe8, 0xd, 0xc0, 0xa0, 0xb2, 0x87, 0x5b, 0xa1, 0x29, 0x9, 0x2a, 0xce, 0xe1, 0xc1, 0x39, 0x13, 0x0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
